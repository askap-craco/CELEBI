def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH:mm:ss')

// Many of these are standard values that may not need to be changed, but you should still check them!

params.label = "210912ph"  // FRB name

params.fcm = "/fred/oz313/data/frb210912/fcm.txt.32063"  // FCM file
params.snoopy = "/fred/oz313/data/frb210912/frb/20210912131518/ICS/C000/snoopyv2.cand"  // Detection candidate file 
params.container = "/fred/oz313/celebi_container_02mar24.sif" //celebi_Nov13.sif path to container where to run CELEBI
params.casapath = "/fred/oz313/src/casa5.8/casa-release-5.8.0-109.el7/bin"
params.ankdir = "/fred/oz313/src/ankflag_craft/"

// Flux calibrator
includeConfig "0407.config"
params.binconfig_fluxcal = ""
params.data_fluxcal = "/fred/oz313/data/frb210912/0407/SB32065/CRAFTCal_beam22_0407-658/20210912193252/C000/D1"

// Polarisation calibrator
includeConfig "vela.config"
params.centre_freq_polcal = 1271.5  // Central frequency in MHz
params.data_polcal = "/fred/oz313/data/frb210912/vela/SB32064/CRAFTCal_beam22_J0835-4510/20210912192124/C000/D1/"

params.data_frb = "/fred/oz313/data/frb210912/frb/20210912131518/ICS/C000/"
params.ra_frb = "23:23:10.424"	// start with the multibeam localisation, it can be updated later
params.dec_frb = "-30:24:19.55"
params.dm_frb = 1233.696 // 1233.69 //1235
params.centre_freq_frb = 1271.5  // Central frequency in MHz
params.baseline_frb = 50.0 //ms
params.bw = 336


params.refant = 5
params.nants = 22 // 23	// number of antennas being included - UPDATE IF YOU MOVE ANTENNAS TO EXCLUDE THEM!
params.nopossm = false
// params.fieldimage = "/fred/oz002/askap/craft/craco/processing/fieldimages/FRB210912_deeperfieldimage.fits"
// params.fieldimagesize = 6144

// Parameters to add along the way
// flag files
params.fluxflagfile = "/fred/oz313/processing/flagfiles/210912_fluxcal_flags.txt"
params.fieldflagfile = "/fred/oz313/processing/flagfiles/210912_field_flags.txt"
params.polflagfile = "/fred/oz313/processing/flagfiles/210912_polcal_flags.txt"

// parameters for making dynspec
params.frb_dynspec_sigma = 5.0
params.frb_baseline = 50.0
params.frb_dynspec_tN = 50
params.frb_dynspec_guard = 1.0


params.polcal_rms_w = 40    // width of rms window in samples
params.polcal_tN = 100      // time averaging
params.polcal_fN = 4        // freq averaging
params.polcal_guard = 0.1   // phase between pulse peak and rms window
params.polcal_cpus = 32     // Number of cpus
params.polcal_live = 1000   // Number of walker iterations 
params.polcal_fast = true   // do fast ifft
params.polcal_ellipse = false

// things that are defined in main.nf but not here
params.noflag = false
params.autoflag = false
params.target = "FRB${params.label}"

// things that were not defined by default
params.beamform = true
params.calibrate = true


// ######################################
// The following is from nextflow.config
// ######################################

apptainer {
    enabled = true
    // autoMounts = true
    runOptions = "-B /fred/oz313/"  // mount the group directory
}

params.publish_dir = "/fred/oz313/processing/output"
params.ozstar = true
process.shell = ["/bin/bash"]
process.cache = "lenient"

// turn on all the juicy logging
trace {
    enabled = true
    file = "${params.label}_${trace_timestamp}_trace.txt"
    overwire = true
}
timeline {
    enabled = true
    file = "210912ph_${trace_timestamp}_timeline.html"
}
report{
    enabled = true
    file = "210912ph_${trace_timestamp}_report.html"
}
dag {
    enabled = true
    file = "210912ph_${trace_timestamp}_dag.html"
}

// define parameters for processes to be executed with slurm
process {
    // default for short running jobs in the queue
    executor = "slurm"
    cpus = 1
    memory = 20.GB
    time = 10.m
    // load apptainer when nextflow starts so we don't have to!
    module = 'apptainer'

    // Short running tasks that jump the slurm queue
    withName: "create_empty_file|get_start_mjd|get_beam_centre|flagdat|refine_candidate|generate_binconfig|image_polcal" {executor="local"}
    withName: "sub_rfi|create_calcfiles|get_peak|find_offset|apply_offset" {executor="local"}
    // Removed from above: difx_to_fits
    
    withLabel: 'aips' {
        // Create a temp directory for aips that is read/writeable
        beforeScript = 'cp -r /fred/oz313/aips-clean-datadirs AIPS_TEMP'

        // mount this directory
        containerOptions = '-B ./AIPS_TEMP/DA00:/usr/local/aips/DA00 -B ./AIPS_TEMP/DATA:/usr/local/aips/DATA'

        // clean up the temp dirs
        afterScript = "rm -r AIPS_TEMP"
    }
    withLabel: 'python' {
         container ="file://$params.container"
         }

    withName: "do_ref_correlation|do_correlation" {
        cpus = 32
        time = 20.m
    }
    withName: "cal_fcal" {
        memory = 16.GB
        errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
        time = { 15.m * task.attempt }
        maxRetries = 3
    }
    withName: load_coarse_dynspec {
        cpus = 8
        memory = 32.GB
    }
    withName: image_finder {
        cpus = 16
        time = 45.m
    }
    withName: do_beamform {
        cpus = 16
        memory = 40.GB
    }
    withName: generate_deripple {
        memory = 64.GB
        time = 2.h
    }
    withName: sum_antennas {
        errorStrategy = 'retry'
        maxErrors = 2

        memory = 32.GB
        time = { 30.m * task.attempt}

    }
    withName: image_field {
        cpus = 16
        memory = 40.GB
        time = 5.h
    }
    withName: deripple {
        memory = 32.GB
    }
    withName: dedisperse {
        memory = 64.GB
    }
    withName: ifft {
        memory = 90.GB
        // If the task is killed due to time out (statuts 140) then try again with additional time
        errorStrategy = { task.exitStatus == 140 ? 'retry' : 'terminate' }
        time = { 2.hour * task.attempt }
        maxRetries = 3
    }

    withName: generate_dynspecs {
        cpus = 16
    }

    withName: determine_pol_cal_solns {
        cpus = 32
        memory = 8.GB
        time = 10.m
    }
    
    withName: apply_pol_cal_solns {
        memory = 64.GB
        time= 15.m
    }
    withName: plot {
        memory = 64.GB
        time = 1.h
    }

}
